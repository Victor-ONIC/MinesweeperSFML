Variables:
// Fenêtre n°1
int const init_win_height = 800;
int const init_win_width = 800;

// Fenêtre n°2
win_height (selon difficulté)
win_width (selon difficulté)
nb_mines (selon difficulté)

// Aire de jeu
field_width (selon difficulté)
field_height (selon difficulté)
sf::Vector2f field_pos = sf::Vector2f(0.f, 100.f);
nb_row (selon difficulté)
nb_col (selon difficulté)

int cell_size = 50;
bool is_mine;
bool is_flag;

// Rectangle
int rect_width = win_width;
int rect_height = 100;


-Une première fenêtre qui demande tout à l'utilisateur- inchangeable
-> 800 x 800
-> demande Difficulté:
    -> Easy (9 x 9, 10 mines)
    -> Medium (16 x 16, 40 mines)
    -> Hard (30 x 16, 99 mines)
(-> demande Mode de jeu)


-Fenêtre du jeu- inchangeable
Easy:
Aire de jeu:
    Position: w0 h100
    50 x 9 = 450
    50 x 9 = 450
    w450 x h450
Stats: 
    Position: w0 h0
    w450 x h100
Dimensions: x450 h550

Medium:
Aire de jeu:
    Position: w0 h100
    50 x 16 = 800
    50 x 16 = 800
    w800 x h800
Stats: 
    Position: w0 h0
    w800 x h100
Dimensions: w800 h900

Hard:
Aire de jeu:
    Position: w0 h100
    50 x 30 = 1500
    50 x 16 = 800
    w1500 x h800
Stats: 
    Position: w0 h0
    w1500 x h100
Dimensions: w1500 h900


-Matrice du jeu-
Contient les cases et leurs états.
std::vector<Cell> matrix(nb_row * nb_col);
Accès avec matrix[ligne*nb_col + colonne].
Cell *get_cell(int row, int col, std::Vector<Cell> &matrix) {
    return &matrix[row*nb_col + col];
}

-Imprimer le jeu-
Créer le rectangle bannière.
Draw le rectangle bannière.
Créer un matrice de Cell. Créer un rectangle cell_shape.
Draw le même cell_shape à chaque emplacement de chaque case.
